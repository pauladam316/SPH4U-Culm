import java.awt.Color;
import org.eclipse.swt.graphics.*;
import java.awt.MouseInfo;
//import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Scale;


public class Main {

	protected Shell shell;
	Display display = new Display();
	public boolean isRed;
	public boolean isPressed;
	public boolean redDelete;
	public boolean blueDelete;
	public boolean isMoving;
	Canvas canvas_1;
	List<Point> redPoints = new ArrayList<Point>();
	List<Point> bluePoints = new ArrayList<Point>();
	List<Point> interference = new ArrayList<Point>();
	Scale scale;
	
	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			Main window = new Main();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}

	/**
	 * Open the window.
	 */
	public void open() {
		Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			drawLine();
			if (!display.readAndDispatch()) {
				//display.sleep();
			}
		}
		
	}

	/**
	 * Create contents of the window.
	 */
	private void createContents() {
		shell = new Shell();
		shell.setSize(749, 542);
		shell.setText("SWT Application");
		
		Button btnFreeHand = new Button(shell, SWT.NONE);
		btnFreeHand.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
			}
		});
		btnFreeHand.setBounds(10, 196, 75, 25);
		btnFreeHand.setText("Freehand");
		
		Button btnEquation = new Button(shell, SWT.NONE);
		btnEquation.setText("Equation");
		btnEquation.setBounds(10, 227, 75, 25);
		
		Button btnGrid = new Button(shell, SWT.NONE);
		btnGrid.setText("Grid");
		btnGrid.setBounds(10, 258, 75, 25);
		
		Button btnRed = new Button(shell, SWT.NONE);
		btnRed.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isRed = true;
			}
		});
		btnRed.setText("Red");
		btnRed.setBounds(309, 420, 75, 25);
		
		Button btnBlue = new Button(shell, SWT.NONE);
		btnBlue.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isRed = false;
			}
		});
		btnBlue.setText("Blue");
		btnBlue.setBounds(390, 420, 75, 25);
		
		Button btnSave = new Button(shell, SWT.NONE);
		btnSave.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
			}
		});
		btnSave.setText("Save");
		btnSave.setBounds(637, 10, 75, 25);
		
		Button btnLoad = new Button(shell, SWT.NONE);
		btnLoad.setText("Load");
		btnLoad.setBounds(637, 41, 75, 25);
		
		Button btnPlay = new Button(shell, SWT.NONE);
		btnPlay.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isMoving = true;
			}
		});
		btnPlay.setText("Play");
		btnPlay.setBounds(309, 29, 75, 25);
		
		Button btnStop = new Button(shell, SWT.NONE);
		btnStop.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isMoving = false;
			}
		});
		btnStop.setText("Stop");
		btnStop.setBounds(390, 29, 75, 25);
		
		canvas_1 = new Canvas(shell, SWT.BORDER | SWT.DOUBLE_BUFFERED );//| SWT.DOUBLE_BUFFERED);
		canvas_1.setLocation(102, 80);
		canvas_1.setSize(621, 334);
		canvas_1.addPaintListener(new PaintListener() {
            public void paintControl(PaintEvent e) {
            	
            	Point [] redArray = redPoints.toArray(new Point[redPoints.size()]);
            	Point [] blueArray = bluePoints.toArray(new Point[bluePoints.size()]);
            	Point [] interferenceArray = interference.toArray(new Point[interference.size()]);
              	
        		//GC gc2 = new GC(canvas_1);
            	e.gc.setForeground(display.getSystemColor(SWT.COLOR_GRAY));
            	 e.gc.drawLine(canvas_1.getBounds().width /2, 0, canvas_1.getBounds().width /2, 10000);
            	 e.gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
            	 e.gc.drawLine(0, canvas_1.getBounds().height /2, 10000, canvas_1.getBounds().height/2);
        		
            	 e.gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
        		
        		for (int i = 1; i < redArray.length; i++) {			
        			 e.gc.drawLine(redArray[i-1].x, redArray[i-1].y, redArray[i].x, redArray[i].y);
        			//gc.drawLine(30,30,50,50);
        		}
        		
        		 e.gc.setForeground(display.getSystemColor(SWT.COLOR_BLUE));
        		for (int i = 1; i < blueArray.length; i++) {			
        			 e.gc.drawLine(blueArray[i-1].x, blueArray[i-1].y, blueArray[i].x, blueArray[i].y);
        			//gc.drawLine(30,30,50,50);
        		}
        		if (interferenceArray != null && interferenceArray.length > 1) {
        			 e.gc.setForeground(display.getSystemColor(SWT.COLOR_GREEN));
        			for (int i = 1; i < interferenceArray.length; i++) {	
        				if (interferenceArray[i] != null) {
        					 e.gc.drawLine(interferenceArray[i-1].x, interferenceArray[i-1].y, interferenceArray[i].x, interferenceArray[i].y);
        				}
        			}
        		}
        		//gc2.drawImage(bufferImage,0,0); 
        		 e.gc.dispose();
        		//bufferImage.dispose(); 
            }
          });
		canvas_1.addMouseListener(new MouseListener() {

			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				isPressed = true;
			}

			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub
				isPressed = false;
				redDelete = true;
				blueDelete = true;
			}
			
		});
		
		Button btnReset = new Button(shell, SWT.NONE);
		btnReset.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				redPoints.clear();
				bluePoints.clear();
				canvas_1.redraw();
				canvas_1.update();
			}
		});
		btnReset.setBounds(228, 29, 75, 25);
		btnReset.setText("Reset");
		
		scale = new Scale(shell, SWT.NONE);
		scale.setMaximum(300);
		scale.setSelection(150);
		scale.setBounds(185, 451, 412, 42);
		
	    //drawLine();
	}
	public void drawLine() {
  		
		if (isMoving) {
			moveLines(redPoints.toArray(new Point[redPoints.size()]), bluePoints.toArray(new  Point[bluePoints.size()]));
			//System.out.println("test");
			return;
		}
		if (!isPressed) {return;}
		if (isRed) {
			if (redDelete) {
				redPoints.clear();
				redDelete = false;
				//fill.setForeground(display.getSystemColor(SWT.COLOR_WHITE));
				//fill.fillRectangle(0, 0, canvas.getBounds().width /2, canvas.getBounds().height);
				//fill2.setForeground(display.getSystemColor(SWT.COLOR_WHITE));
				//fill2.fillRectangle(0, 0, canvas_1.getBounds().width /2, canvas_1.getBounds().height);
			
			}
			redPoints.add(canvas_1.toControl(display.getCursorLocation()));
			if (redPoints.size() > 1) {
				if(redPoints.get(redPoints.size()-1).x < redPoints.get(redPoints.size()-2).x) {
					redPoints.get(redPoints.size()-1).x = redPoints.get(redPoints.size()-2).x;
				}
				if (redPoints.get(redPoints.size()-1).x > canvas_1.getBounds().width /2) {
					redPoints.get(redPoints.size()-1).x = canvas_1.getBounds().width /2;
				}
			}
			if (redPoints.get(0).x > canvas_1.getBounds().width /2) {
				redPoints.get(0).x = canvas_1.getBounds().width /2;
			}
		}
		else {
			if (blueDelete) {
				bluePoints.clear();
				blueDelete = false;
				//fill.setForeground(display.getSystemColor(SWT.COLOR_WHITE));
				//fill.fillRectangle(canvas.getBounds().width /2, 0, 1000, 1000);
				//fill2.setForeground(display.getSystemColor(SWT.COLOR_WHITE));
				//fill2.fillRectangle(canvas_1.getBounds().width /2, 0, 1000, 1000);
				
			}
			bluePoints.add(canvas_1.toControl(display.getCursorLocation()));
			if (bluePoints.size() > 1) {
				if(bluePoints.get(bluePoints.size()-1).x < bluePoints.get(bluePoints.size()-2).x) {
					bluePoints.get(bluePoints.size()-1).x = bluePoints.get(bluePoints.size()-2).x;
				}
				if (bluePoints.get(bluePoints.size()-1).x < canvas_1.getBounds().width /2) {
					bluePoints.get(bluePoints.size()-1).x = canvas_1.getBounds().width /2;
				}
			}
			if (bluePoints.get(0).x < canvas_1.getBounds().width /2) {
				bluePoints.get(0).x = canvas_1.getBounds().width /2;
			}
		}
		//fill2.dispose();
		renderLine(redPoints.toArray(new Point[redPoints.size()]), bluePoints.toArray(new  Point[bluePoints.size()]), null);
		
	}
	public void renderLine(Point[] redPoints, Point [] bluePoints, Point [] interference) {	
		if (!isMoving && !isPressed) {
			return;
		}
		canvas_1.update();
		canvas_1.redraw();
		
	}
	
	public void moveLines(Point[] redPoints, Point [] bluePoints) {
		int longestLine;
		int otherLine;
		boolean redLong;
		interference.clear();
		
		if (redPoints.length > bluePoints.length) {
			longestLine = redPoints.length;
			otherLine = bluePoints.length;
			redLong = true;
		}
		else {
			longestLine = bluePoints.length;
			otherLine = redPoints.length;
			redLong = false;
		}
		
		
		for (int i = 0; i < redPoints.length; i++) {
			redPoints[i].x ++;
		}
		for (int i = 0; i < bluePoints.length; i++) {
			bluePoints[i].x --;
		}
		for (int i = 0; i < longestLine; i++) {
			for (int k = 0; k < otherLine; k++) {
				if (redLong) {
					if (i < redPoints.length-1 && k < bluePoints.length - 1) {
						if (redPoints[i].x == bluePoints[k].x){
							int y = (int)(redPoints[i].y-(canvas_1.getBounds().height)/2)*-1 + (bluePoints[k].y-(canvas_1.getBounds().height)/2)*-1;
							y *= -1;
							y += ((canvas_1.getBounds().height)/2);
							interference.add(new Point (redPoints[i].x, y));
						}
					}
				}
				if (!redLong) {
					if (i < bluePoints.length-1 && k < redPoints.length - 1) {
						if (redPoints[k].x == bluePoints[i].x){
							int y = (int)(bluePoints[i].y-(canvas_1.getBounds().height)/2)*-1 + (redPoints[k].y-(canvas_1.getBounds().height)/2)*-1;
							y += ((canvas_1.getBounds().height)/2)*-1;
							interference.add(new Point (bluePoints[i].x, y));
							System.out.println("shit");
						}
					}
				}
			}
		}
		renderLine(redPoints,bluePoints, interference.toArray(new Point[interference.size()]));
		try {
		    Thread.sleep(scale.getSelection());                 //1000 milliseconds is one second.
		} catch(InterruptedException ex) {
		    Thread.currentThread().interrupt();
		}
	}
}
