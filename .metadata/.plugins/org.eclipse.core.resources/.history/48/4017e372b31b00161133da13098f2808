import java.awt.Color;
import java.awt.MouseInfo;
//import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;


public class Main {

	protected Shell shell;
	Display display = new Display();
	public boolean isRed;
	public boolean isPressed;
	public boolean redDelete;
	public boolean blueDelete;
	public Composite composite;
	
	Canvas canvas;
	List<Point> redPoints = new ArrayList<Point>();
	List<Point> bluePoints = new ArrayList<Point>();
	
	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			Main window = new Main();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}

	/**
	 * Open the window.
	 */
	public void open() {
		Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			drawLine();
			composite.setBounds(0, 0, shell.getBounds().width,  shell.getBounds().height);
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
		
	}

	/**
	 * Create contents of the window.
	 */
	private void createContents() {
		shell = new Shell();
		shell.setSize(450, 300);
		shell.setText("SWT Application");
		
		composite = new Composite(shell, SWT.NONE);
		composite.setBounds(0, 0, 434, 261);
		
		Button btnFreeHand = new Button(composite, SWT.NONE);
		btnFreeHand.setLocation(10, 64);
		btnFreeHand.setSize(75, 25);
		btnFreeHand.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
			}
		});
		btnFreeHand.setText("Freehand");
		
		Button btnEquation = new Button(composite, SWT.NONE);
		btnEquation.setLocation(10, 93);
		btnEquation.setSize(75, 25);
		btnEquation.setText("Equation");
		
		Button btnGrid = new Button(composite, SWT.NONE);
		btnGrid.setLocation(10, 122);
		btnGrid.setSize(75, 25);
		btnGrid.setText("Grid");
		
		Button btnRed = new Button(composite, SWT.NONE);
		btnRed.setLocation(189, 213);
		btnRed.setSize(75, 25);
		btnRed.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isRed = true;
			}
		});
		btnRed.setText("Red");
		
		Button btnBlue = new Button(composite, SWT.NONE);
		btnBlue.setLocation(267, 213);
		btnBlue.setSize(75, 25);
		btnBlue.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isRed = false;
			}
		});
		btnBlue.setText("Blue");
		
		Button btnSave = new Button(composite, SWT.NONE);
		btnSave.setLocation(349, 10);
		btnSave.setSize(75, 25);
		btnSave.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
			}
		});
		btnSave.setText("Save");
		
		Button btnLoad = new Button(composite, SWT.NONE);
		btnLoad.setLocation(349, 41);
		btnLoad.setSize(75, 25);
		btnLoad.setText("Load");
		
		Button btnPlay = new Button(composite, SWT.NONE);
		btnPlay.setLocation(161, 10);
		btnPlay.setSize(75, 25);
		btnPlay.setText("Play");
		
		Button btnStop = new Button(composite, SWT.NONE);
		btnStop.setLocation(240, 10);
		btnStop.setSize(75, 25);
		btnStop.setText("Stop");
		
		canvas = new Canvas(composite, SWT.BORDER);
		canvas.setLocation(91, 73);
		canvas.setSize(333, 139);
		canvas.addMouseListener(new MouseListener() {

			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				isPressed = true;
			}

			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub
				isPressed = false;
				redDelete = true;
				blueDelete = true;
			}
			
		});
		
	    // Add a handler to do the drawing
	    canvas.addPaintListener(new PaintListener() {
	    
	      public void paintControl(PaintEvent e) {
	    	 GC fill = new GC(canvas);
	  		fill.setForeground(display.getSystemColor(SWT.COLOR_GRAY));
	  		fill.drawLine(canvas.getBounds().width /2, 0, canvas.getBounds().width /2, 10000);
	  		fill.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
	  		fill.drawLine(0, canvas.getBounds().height /2, 10000, canvas.getBounds().height/2);
	      }
	    });
		
	    //drawLine();
	}
	public void drawLine() {
		if (!isPressed) {return;}
		if (isRed) {
			if (redDelete) {
				redPoints.clear();
				redDelete = false;
				GC fill = new GC(canvas);
				fill.setForeground(display.getSystemColor(SWT.COLOR_WHITE));
				fill.fillRectangle(0, 0, canvas.getBounds().width /2, canvas.getBounds().height);
			
			}
			redPoints.add(canvas.toControl(display.getCursorLocation()));
			if (redPoints.size() > 1) {
				if(redPoints.get(redPoints.size()-1).x < redPoints.get(redPoints.size()-2).x) {
					redPoints.get(redPoints.size()-1).x = redPoints.get(redPoints.size()-2).x;
				}
				if (redPoints.get(redPoints.size()-1).x > canvas.getBounds().width /2) {
					redPoints.get(redPoints.size()-1).x = canvas.getBounds().width /2;
				}
			}
			if (redPoints.get(0).x > canvas.getBounds().width /2) {
				redPoints.get(0).x = canvas.getBounds().width /2;
			}
		}
		else {
			if (blueDelete) {
				bluePoints.clear();
				blueDelete = false;
				GC fill = new GC(canvas);
				fill.setForeground(display.getSystemColor(SWT.COLOR_WHITE));
				fill.fillRectangle(canvas.getBounds().width /2, 0, 1000, 1000);
				
			}
			bluePoints.add(canvas.toControl(display.getCursorLocation()));
			if (bluePoints.size() > 1) {
				if(bluePoints.get(bluePoints.size()-1).x < bluePoints.get(bluePoints.size()-2).x) {
					bluePoints.get(bluePoints.size()-1).x = bluePoints.get(bluePoints.size()-2).x;
				}
				if (bluePoints.get(bluePoints.size()-1).x < canvas.getBounds().width /2) {
					bluePoints.get(bluePoints.size()-1).x = canvas.getBounds().width /2;
				}
			}
			if (bluePoints.get(0).x < canvas.getBounds().width /2) {
				bluePoints.get(0).x = canvas.getBounds().width /2;
			}
		}
		renderLine(redPoints.toArray(new Point[redPoints.size()]), bluePoints.toArray(new  Point[bluePoints.size()]));
	
	}
	public void renderLine(Point[] redPoints, Point [] bluePoints) {
		GC gc = new GC(canvas);
		gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
		for (int i = 1; i < redPoints.length; i++) {			
			gc.drawLine(redPoints[i-1].x, redPoints[i-1].y, redPoints[i].x, redPoints[i].y);
			//gc.drawLine(30,30,50,50);
		}
		
		gc.setForeground(display.getSystemColor(SWT.COLOR_BLUE));
		for (int i = 1; i < bluePoints.length; i++) {			
			gc.drawLine(bluePoints[i-1].x, bluePoints[i-1].y, bluePoints[i].x, bluePoints[i].y);
			//gc.drawLine(30,30,50,50);
		}
		
		GC fill = new GC(canvas);
		fill.setForeground(display.getSystemColor(SWT.COLOR_GRAY));
		fill.drawLine(canvas.getBounds().width /2, 0, canvas.getBounds().width /2, 10000);
		fill.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
  		fill.drawLine(0, canvas.getBounds().height /2, 10000, canvas.getBounds().height/2);
	}
}
