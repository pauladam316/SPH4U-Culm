package culm;
import java.awt.Color;

import org.apache.commons.math.util.MathUtils;
import org.eclipse.swt.graphics.*;

import java.awt.MouseInfo;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Time;
//import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Scale;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.widgets.Label;


public class Main {

	protected Shell shlSuperpositionSimulation;
	Display display = new Display();
	public boolean isRed;
	public boolean isPressed;
	public boolean redDelete;
	public boolean blueDelete;
	public boolean isMoving;
	public boolean isPaused;
	Canvas canvas;
	List<Point> redPoints = new ArrayList<Point>();
	List<Point> bluePoints = new ArrayList<Point>();
	List<Point> interference = new ArrayList<Point>();
	Scale scale;
	Scale scale2;
	public int sliderValue;
	private Text redPer;
	private Text redVert;
	private Text redHor;
	private Text redAmp;
	public int drawMode;
	private Text bluePer;
	private Text blueVert;
	private Text blueHor;
	private Text blueAmp;
	Composite redBox;
	Composite blueBox;
	Button btnFreehand;
	Button btnEquation;
	Button btnGrid;
	Label lblToolTip;
	private Label lblTime;
	public boolean redTrack = false;
	public boolean blueTrack = false;
	ArrayList<Point> blueBackup = new ArrayList<Point>();
	ArrayList<Point> redBackup = new ArrayList<Point>();
	int test = 0;
	Button btnLoad;
	Button btnSave;
	String lastLoad;
	String lastSave;
	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			Main window = new Main();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}

	/**
	 * Open the window.
	 */
	public void open() {
		Display display = Display.getDefault();
		createContents();
		shlSuperpositionSimulation.open();
		shlSuperpositionSimulation.layout();
		while (!shlSuperpositionSimulation.isDisposed()) {
			if (redBackup.size() > 0) {
				//System.out.println(redBackup.get(redBackup.size()-1).x);
			}
			sliderChecker();
			if (drawMode == 0) {
				drawLine();
				redBox.setVisible(false);
				blueBox.setVisible(false);
				btnGrid.setVisible(true);
				lblToolTip.setVisible(true);
				btnLoad.setVisible(true);
				btnSave.setVisible(true);
			}
			else if (drawMode == 1) {
				drawEquation();
				 if (!isPaused && !isMoving) {
					 redBox.setVisible(true);
					 blueBox.setVisible(true);
				 }
				 else {
					 redBox.setVisible(false);
					 blueBox.setVisible(false);
				 }
				 btnGrid.setVisible(false);
				 lblToolTip.setVisible(false);
				 btnLoad.setVisible(false);
				 btnSave.setVisible(false);
			}
			if (drawMode == 2) {
				drawLine();
				redBox.setVisible(false);
				blueBox.setVisible(false);
				btnGrid.setVisible(true);
				lblToolTip.setVisible(true);
				btnLoad.setVisible(true);
				btnSave.setVisible(true);
			}
			canvas.redraw();
			canvas.update();
			
			if (!display.readAndDispatch()) {
				//display.sleep();
			}
		}
		
	}

	/**
	 * Create contents of the window.
	 */
	private void createContents() { 

		isRed = true;
		
		shlSuperpositionSimulation = new Shell();
		shlSuperpositionSimulation.setImage(SWTResourceManager.getImage(Main.class, "/resources/icon.png"));
		shlSuperpositionSimulation.setSize(930, 646);
		shlSuperpositionSimulation.setText("Superposition Simulation");
		
		btnSave = new Button(shlSuperpositionSimulation, SWT.NONE);
		btnSave.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				JFileChooser saveFile = new JFileChooser();
				FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
				saveFile.setFileFilter(filter);
				
				if (lastLoad != null) {
					saveFile.setCurrentDirectory(new File(lastLoad));
				}
				else {
					saveFile.setCurrentDirectory(new File(System.getProperty("user.dir")));
				}
				int userSelection = saveFile.showSaveDialog(null);
				if (userSelection == JFileChooser.APPROVE_OPTION) {
					File selectedFile = saveFile.getSelectedFile();
					lastLoad = saveFile.getSelectedFile().getAbsolutePath();
			        try {
			            String fileName = selectedFile.getCanonicalPath();
			            if (!fileName.endsWith(".txt")) {
			                selectedFile = new File(fileName + ".txt");
			            }
			            PrintWriter out = new PrintWriter(selectedFile);
			            for (int i = 0; i < redPoints.size(); i++ ) {
			            	out.println(redPoints.get(i).x);
			            	out.println(redPoints.get(i).y);
			            }
			            out.println("-");
			            for (int i = 0; i < bluePoints.size(); i++ ) {
			            	out.println(bluePoints.get(i).x);
			            	out.println(bluePoints.get(i).y);
			            }
			            out.println("-");
			            for (int i = 0; i < interference.size(); i++ ) {
			            	out.println(interference.get(i).x);
			            	out.println(bluePoints.get(i).y);
			            }
			            out.println("-");
			            out.println(scale2.getSelection());
			            out.close();
			            
			        } catch (IOException e1) {
			            e1.printStackTrace();
			        }
				}				
			}
		});
		btnSave.setText("Save");
		btnSave.setBounds(822, 10, 75, 25);
		
		btnLoad = new Button(shlSuperpositionSimulation, SWT.NONE);
		btnLoad.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				JFileChooser loadFile = new JFileChooser();
				FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
				loadFile.setFileFilter(filter);
				if (lastLoad != null) {
					loadFile.setCurrentDirectory(new File(lastLoad));
				}
				else {
					loadFile.setCurrentDirectory(new File(System.getProperty("user.dir")));
				}
				int userSelection = loadFile.showOpenDialog(null);
				
				if (userSelection == JFileChooser.APPROVE_OPTION) {
					File selectedFile = loadFile.getSelectedFile();
					lastLoad = loadFile.getSelectedFile().getAbsolutePath();
		           // String fileName = selectedFile.getCanonicalPath();
		           
		            try {
		            	
		            	BufferedReader br = new BufferedReader(new FileReader(selectedFile.getCanonicalPath()));
		            	
		            	redPoints.clear();
		            	while (true) {
		            		String line = br.readLine();
		            		if (line.equals("-")) {
		            			break;
		            		}
		            		else {
		            			redPoints.add(new Point(Integer.parseInt(line),(Integer.parseInt(br.readLine()))));		            		
		            		}
	            		}
		            	bluePoints.clear();
		            	while (true) {
		            		String line = br.readLine();
		            		if (line.equals("-")) {
		            			break;
		            		}
		            		else {
		            			bluePoints.add(new Point(Integer.parseInt(line),(Integer.parseInt(br.readLine()))));		            		
		            		}
	            		}
		            	interference.clear();
		            	while (true) {
		            		String line = br.readLine();
		            		if (line.equals("-")) {
		            			break;
		            		}
		            		else {
		            			interference.add(new Point(Integer.parseInt(line),(Integer.parseInt(br.readLine()))));		            		
		            		}
	            		}
		            	scale2.setSelection(Integer.parseInt(br.readLine()));
		            	sliderValue = scale2.getSelection();
		            	br.close();
		                
		            } catch (IOException e2) {
		                
		            }
		            canvas.redraw();
		            canvas.update();
		            redBackup.clear();
		    		redBackup = new ArrayList<Point>();
		    		for (int i = 0; i < redPoints.size(); i++) {
		    			//System.out.println(i);
		    			int x = redPoints.get(i).x;
		    			System.out.println( "Updating");
		    			int y = redPoints.get(i).y;
		    			redBackup.add(new Point(x,y));
		    		}
		    		blueBackup.clear();
		    		blueBackup = new ArrayList<Point>();
		    		for (int i = 0; i < bluePoints.size(); i++) {
		    			//System.out.println(i);
		    			int x = bluePoints.get(i).x;
		    			//System.out.println( bluePoints.get(i).y);
		    			int y = bluePoints.get(i).y;
		    			blueBackup.add(new Point(x,y));
		    		}
				}				
			}
		});
		btnLoad.setText("Load");
		btnLoad.setBounds(822, 41, 75, 25);
		
		Button btnPlay = new Button(shlSuperpositionSimulation, SWT.NONE);
		btnPlay.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isMoving = true;
				redTrack=false;
				blueTrack=false;
				
			}
		});
		btnPlay.setText("Play");
		btnPlay.setBounds(24, 441, 75, 25);
		
		Button btnStop = new Button(shlSuperpositionSimulation, SWT.NONE);
		btnStop.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				isMoving = false;
				isPaused = true;
				
			}
		});
		btnStop.setText("Stop");
		btnStop.setBounds(24, 471, 75, 25);
		
		canvas = new Canvas(shlSuperpositionSimulation, SWT.BORDER | SWT.DOUBLE_BUFFERED );//| SWT.DOUBLE_BUFFERED);
		canvas.setLocation(148, 72);
		canvas.setSize(600, 350);
		canvas.addPaintListener(new PaintListener() {
            public void paintControl(PaintEvent e) {
            	
            	Point [] redArray = redPoints.toArray(new Point[redPoints.size()]);
            	Point [] blueArray = bluePoints.toArray(new Point[bluePoints.size()]);
            	Point [] interferenceArray = interference.toArray(new Point[interference.size()]);
              	
        		//GC gc2 = new GC(canvas_1);
            	e.gc.setForeground(display.getSystemColor(SWT.COLOR_GRAY));
            	e.gc.setLineWidth(2);
            	e.gc.drawLine(canvas.getBounds().width /2, 0, canvas.getBounds().width /2, 10000);
            	e.gc.setLineWidth(1);
            	
            	 if (drawMode == 2 && !isMoving) {
            		 for (int i = 0; i < canvas.getBounds().height; i+= 25) {
            			 e.gc.drawLine(0, i, 10000, i);
            		 }
            		 for (int i = 0; i < canvas.getBounds().width; i+= 25) {
            			 e.gc.drawLine(i, 0, i, 10000);
            		 }
            		 
            	 }
            	 e.gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
            	 e.gc.drawLine(0, canvas.getBounds().height /2, 10000, canvas.getBounds().height/2);
        		
            	 e.gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
            	 e.gc.setLineWidth(3);
            	 
        		for (int i = 1; i < redArray.length; i++) {		
        			//e.gc.drawOval(redArray[i].x,redArray[i].y, 1, 1); 
        			e.gc.drawLine(redArray[i-1].x, redArray[i-1].y, redArray[i].x, redArray[i].y);
        			//e.gc.drawLine(30,30,50,50);
        		}
        		/*
        		if (redTrack && redArray.length > 0) {
        			e.gc.setLineWidth(1);
        			e.gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
        			e.gc.drawLine(redArray[redArray.length-1].x, redArray[redArray.length-1].y, canvas.toControl(display.getCursorLocation()).x, canvas.toControl(display.getCursorLocation()).y);
        			e.gc.setLineWidth(3);
        			e.gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
        		}
        		*/
        		 e.gc.setForeground(display.getSystemColor(SWT.COLOR_BLUE));
        		for (int i = 1; i < blueArray.length; i++) {	
        			
        			 e.gc.drawLine(blueArray[i-1].x, blueArray[i-1].y, blueArray[i].x, blueArray[i].y);
        			//gc.drawLine(30,30,50,50);
        		}
        		/*
        		if (blueTrack && blueArray.length > 0) {
        			e.gc.setLineWidth(1);
        			e.gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
        			e.gc.drawLine(blueArray[blueArray.length-1].x, blueArray[blueArray.length-1].y, canvas.toControl(display.getCursorLocation()).x, canvas.toControl(display.getCursorLocation()).y);
        			e.gc.setLineWidth(3);
        			e.gc.setForeground(display.getSystemColor(SWT.COLOR_BLUE));
        		}
        		*/
        		if (interferenceArray != null && interferenceArray.length > 1) {
        			 e.gc.setForeground(display.getSystemColor(SWT.COLOR_GREEN));
        			for (int i = 1; i < interferenceArray.length; i++) {	
        				if (interferenceArray[i] != null) {
        					 e.gc.drawLine(interferenceArray[i-1].x, interferenceArray[i-1].y, interferenceArray[i].x, interferenceArray[i].y);
        				}
        			}
        		}
        		//gc2.drawImage(bufferImage,0,0); 
        		 e.gc.dispose();
        		//bufferImage.dispose(); 
        		//System.out.println("Red: " + redTrack + " Blue: " + blueTrack);
        		 //System.out.println(isRed);
            }
          });
		canvas.addMouseListener(new MouseListener() {

			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				isPressed = true;
			}

			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub
				isPressed = false;
				//redDelete = true;
				//blueDelete = true;
			}
			
		});
		canvas.addKeyListener( new KeyAdapter() {
		    @Override
		    public void keyPressed( KeyEvent e ) {
		    	redTrack = false;
		    	blueTrack = false;
		    }
		});
		Button btnReset = new Button(shlSuperpositionSimulation, SWT.NONE);
		btnReset.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				redPoints.clear();
				bluePoints.clear();
				for (int i = 0; i < redBackup.size(); i++) {
					int x = redBackup.get(i).x;
					int y = redBackup.get(i).y;
					redPoints.add(new Point (x,y));
				}
				for (int i = 0; i < blueBackup.size(); i++) {
					int x = blueBackup.get(i).x;
					int y = blueBackup.get(i).y;
					bluePoints.add(new Point (x,y));
				}
				interference.clear();
				canvas.redraw();
				canvas.update();
				scale2.setSelection(0);
				sliderValue = 0;
				isPaused = false;
				
			}
		});
		btnReset.setBounds(24, 502, 75, 25);
		btnReset.setText("Reset");
		
		scale = new Scale(shlSuperpositionSimulation, SWT.NONE);
		scale.setMaximum(300);
		scale.setSelection(50);
		scale.setBounds(239, 467, 412, 42);
		
		Label lblSpeed = new Label(shlSuperpositionSimulation, SWT.CENTER);
		lblSpeed.setBounds(412, 446, 55, 15);
		lblSpeed.setText("Speed");
		
		scale2 = new Scale(shlSuperpositionSimulation, SWT.NONE);
		scale2.setMaximum(1000);
		scale2.setBounds(239, 555, 412, 42);
		
	    redBox = new Composite(shlSuperpositionSimulation, SWT.BORDER);
		redBox.setBounds(10, 214, 132, 168);
		redBox.setVisible(false);
		
		Label lblAmplitude = new Label(redBox, SWT.NONE);
		lblAmplitude.setLocation(19, 10);
		lblAmplitude.setSize(55, 15);
		lblAmplitude.setAlignment(SWT.RIGHT);
		lblAmplitude.setText("Amplitude");
		
		Label lblVertical = new Label(redBox, SWT.NONE);
		lblVertical.setLocation(3, 71);
		lblVertical.setSize(75, 30);
		lblVertical.setAlignment(SWT.RIGHT);
		lblVertical.setText("Vertical\r\nDisplacement");
		
		redPer = new Text(redBox, SWT.BORDER);
		redPer.setText("2");
		redPer.setLocation(81, 41);
		redPer.setSize(30, 21);
		
		redVert = new Text(redBox, SWT.BORDER);
		redVert.setText("0");
		redVert.setLocation(81, 75);
		redVert.setSize(30, 21);
		
		redHor = new Text(redBox, SWT.BORDER);
		redHor.setText("0");
		redHor.setLocation(80, 110);
		redHor.setSize(31, 21);
		
		Label lblHorizontal = new Label(redBox, SWT.NONE);
		lblHorizontal.setLocation(-1, 107);
		lblHorizontal.setSize(75, 49);
		lblHorizontal.setAlignment(SWT.RIGHT);
		lblHorizontal.setText("Horizontal\r\nDisplacement\r\n");
		
		redAmp = new Text(redBox, SWT.BORDER);
		redAmp.setText("1");
		redAmp.setLocation(81, 10);
		redAmp.setSize(30, 21);
		
		Label lblPi = new Label(redBox, SWT.NONE);
		lblPi.setLocation(113, 36);
		lblPi.setSize(21, 25);
		lblPi.setFont(SWTResourceManager.getFont("Segoe UI", 14, SWT.NORMAL));
		lblPi.setText("\u03C0");
		
		blueBox = new Composite(shlSuperpositionSimulation, SWT.BORDER);
		blueBox.setBounds(765, 214, 132, 168);
		blueBox.setVisible(false);
		
		Label label = new Label(blueBox, SWT.NONE);
		label.setText("Amplitude");
		label.setAlignment(SWT.RIGHT);
		label.setBounds(19, 10, 55, 15);
		
		Label label_1 = new Label(blueBox, SWT.NONE);
		label_1.setText("Period");
		label_1.setAlignment(SWT.RIGHT);
		label_1.setBounds(19, 44, 55, 15);
		
		Label label_2 = new Label(blueBox, SWT.NONE);
		label_2.setText("Vertical\r\nDisplacement");
		label_2.setAlignment(SWT.RIGHT);
		label_2.setBounds(3, 71, 75, 30);
		
		bluePer = new Text(blueBox, SWT.BORDER);
		bluePer.setText("2");
		bluePer.setBounds(81, 41, 30, 21);
		
		blueVert = new Text(blueBox, SWT.BORDER);
		blueVert.setText("0");
		blueVert.setBounds(81, 75, 30, 21);
		
		blueHor = new Text(blueBox, SWT.BORDER);
		blueHor.setText("0");
		blueHor.setBounds(80, 110, 31, 21);
		
		Label label_3 = new Label(blueBox, SWT.NONE);
		label_3.setText("Horizontal\r\nDisplacement\r\n");
		label_3.setAlignment(SWT.RIGHT);
		label_3.setBounds(-1, 107, 75, 49);
		
		blueAmp = new Text(blueBox, SWT.BORDER);
		blueAmp.setText("1");
		blueAmp.setBounds(81, 10, 30, 21);
		
		Label label_4 = new Label(blueBox, SWT.NONE);
		label_4.setText("\u03C0");
		label_4.setFont(SWTResourceManager.getFont("Segoe UI", 14, SWT.NORMAL));
		label_4.setBounds(113, 36, 21, 25);
		
		Composite composite = new Composite(shlSuperpositionSimulation, SWT.BORDER);
		composite.setBounds(29, 72, 112, 95);
		
		btnFreehand = new Button(composite, SWT.RADIO);
		btnFreehand.setSelection(true);
		btnFreehand.setLocation(10, 20);
		btnFreehand.setSize(90, 16);
		btnFreehand.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				drawMode = 0;
				bluePoints.clear();
				redPoints.clear();
				interference.clear();
				isPaused = false;
				isMoving = false;
				btnEquation.setSelection(false);
				btnGrid.setSelection(false);
				btnFreehand.setSelection(true);
			}
		});
		btnFreehand.setText("Freehand");
		
		btnEquation = new Button(composite, SWT.RADIO);
		btnEquation.setLocation(10, 60);
		btnEquation.setSize(90, 16);
		btnEquation.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				drawMode = 1;
				bluePoints.clear();
				redPoints.clear();
				interference.clear();
				isPaused = false;
				isMoving = false;
				btnGrid.setSelection(false);
				btnFreehand.setSelection(false);
				btnEquation.setSelection(true);
			}
		});
		btnEquation.setText("Equation");
		
		lblTime = new Label(shlSuperpositionSimulation, SWT.CENTER);
		lblTime.setText("Time");
		lblTime.setBounds(412, 528, 55, 15);
		
		btnGrid = new Button(shlSuperpositionSimulation, SWT.CHECK);
		btnGrid.setBounds(147, 424, 90, 16);
		btnGrid.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				//btnFreehand.setSelection(false);
				//btnEquation.setSelection(false);
				//System.out.println(btnGrid.getSelection());



				if (btnGrid.getSelection() == false) {
					drawMode=0;
				}
				else {
					drawMode = 2;
				}
			}
		});
		btnGrid.setText("Snap To grid");
		
		lblToolTip = new Label(shlSuperpositionSimulation, SWT.NONE);
		lblToolTip.setBounds(491, 425, 257, 15);
		lblToolTip.setText("Click to set vertex points, click and drag to draw");
		
		Button btnClear = new Button(shlSuperpositionSimulation, SWT.NONE);
		btnClear.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				redPoints.clear();
				bluePoints.clear();
				interference.clear();
				canvas.redraw();
				canvas.update();
				scale2.setSelection(0);
				sliderValue = 0;
				isPaused = false;
				redPer.setText("2");
				redVert.setText("0");
				redHor.setText("0");
				redAmp.setText("1");
				bluePer.setText("2");
				blueVert.setText("0");
				blueHor.setText("0");
				blueAmp.setText("1");
				
			}
		});
		btnClear.setBounds(24, 534, 75, 25);
		btnClear.setText("Clear");
		
		Label lblAdam = new Label(shlSuperpositionSimulation, SWT.NONE);
		lblAdam.setBounds(813, 592, 101, 15);
		lblAdam.setText("2016 - Adam Paul");
		
	    //drawLine();
	}
	public void drawLine() {
		test ++;
		if (isMoving) {
			moveLines(redPoints.toArray(new Point[redPoints.size()]), bluePoints.toArray(new  Point[bluePoints.size()]), 1);
			return;
		}
		
		if (!isPressed || isPaused) {
			return;
		}
		redBackup.clear();
		redBackup = new ArrayList<Point>();
		for (int i = 0; i < redPoints.size(); i++) {
			//System.out.println(i);
			int x = redPoints.get(i).x;
			System.out.println( "Updating");
			int y = redPoints.get(i).y;
			redBackup.add(new Point(x,y));
		}
		blueBackup.clear();
		blueBackup = new ArrayList<Point>();
		for (int i = 0; i < bluePoints.size(); i++) {
			//System.out.println(i);
			int x = bluePoints.get(i).x;
			//System.out.println( bluePoints.get(i).y);
			int y = bluePoints.get(i).y;
			blueBackup.add(new Point(x,y));
		}
		
  		if (canvas.toControl(display.getCursorLocation()).x <= canvas.getBounds().width/2 && isPressed) {
  			isRed = true;
  			redTrack=true;
  			blueTrack=false;
  		}
  		if (canvas.toControl(display.getCursorLocation()).x > canvas.getBounds().width/2  && isPressed) {
  			isRed = false;
  			blueTrack=true;
  			//System.out.println("set");
  			redTrack=false;
  		}
  		Point mouseLocation= new Point (0,0);
  		
  		if (drawMode == 2) {
	  		double mouseX;
			double mouseY;
			//System.out.println("Normal " + (float)canvas.toControl(display.getCursorLocation()).x);
			//System.out.println("Rounded " + Math.round(canvas.toControl(display.getCursorLocation()).x/25)*25));
			if (canvas.toControl(display.getCursorLocation()).x - Math.round((canvas.toControl(display.getCursorLocation()).x/25)*25) > 12 ) {
				mouseX = (double) (25*(Math.ceil((float)(canvas.toControl(display.getCursorLocation()).x)/25)));
			}
			else {
				mouseX = Math.round((canvas.toControl(display.getCursorLocation()).x/25)*25);
			}
			if (canvas.toControl(display.getCursorLocation()).y - Math.round((canvas.toControl(display.getCursorLocation()).y/25)*25) > 12 ) {
				mouseY = (double) (25*(Math.ceil((float)(canvas.toControl(display.getCursorLocation()).y)/25)));
			}
			else {
				mouseY = Math.round((canvas.toControl(display.getCursorLocation()).y/25)*25);
			}
			mouseLocation = new Point ((int) mouseX,(int) mouseY);
  		}
		if (isRed) {
			//if (drawMode == 2) {
			///	redPoints.add(new Point((int) canvas.toControl(display.getCursorLocation()).x, (int) Math.round((canvas.toControl(display.getCursorLocation()).y/25)*25))); 
			//}
			if (drawMode == 2) {
				if (redPoints.size() > 1) {					
					Point lastPoint = redPoints.get(redPoints.size()-1);			
					int count = mouseLocation.x-lastPoint.x;
					
					if (count > 1) {
						float avgHeight = (float)(mouseLocation.y - lastPoint.y)/(count);
						for (int i = 0; i < count; i++) {
							redPoints.add(new Point(lastPoint.x + i, lastPoint.y + (int)(avgHeight * i)));
						}
					}
					else {
						redPoints.add(mouseLocation);
					}
				}
				
				else {
					redPoints.add(mouseLocation);
				}
				
				//redPoints.add(new Point((int) canvas.toControl(display.getCursorLocation()).x, (int) Math.round((canvas.toControl(display.getCursorLocation()).y/25)*25))); 
			}
			else {
				if (redPoints.size() > 1) {
					
					Point lastPoint = redPoints.get(redPoints.size()-1);
					int count = canvas.toControl(display.getCursorLocation()).x-lastPoint.x;
					
					if (count > 1) {
						float avgHeight = (float)(canvas.toControl(display.getCursorLocation()).y - lastPoint.y)/(count);
						for (int i = 0; i < count; i++) {
							redPoints.add(new Point(lastPoint.x + i, lastPoint.y + (int)(avgHeight * i)));
						}
					}
					else {
						redPoints.add(canvas.toControl(display.getCursorLocation()));
					}
				}
				
				else {
					redPoints.add(canvas.toControl(display.getCursorLocation()));
				}
			}
			redTrack = true;
			blueTrack = false;
			
			if (redPoints.size() > 1) {
				if(redPoints.get(redPoints.size()-1).x < redPoints.get(redPoints.size()-2).x) {
					redPoints.get(redPoints.size()-1).x = redPoints.get(redPoints.size()-2).x;
					//System.out.println("out of bounds");
				}
				if (redPoints.get(redPoints.size()-1).x >= canvas.getBounds().width /2) {
					redPoints.get(redPoints.size()-1).x = canvas.getBounds().width /2;
					//System.out.println("out of bounds");
				}
			}
			if (redPoints.get(0).x > canvas.getBounds().width /2) {
				redPoints.get(0).x = canvas.getBounds().width /2;
				//System.out.println("out of bounds");
			}
	
		}
		else {
			if (drawMode == 2) {
				//Point mouseLocation = new Point ((int) Math.round((canvas.toControl(display.getCursorLocation()).x/25)*25), (int) Math.round((canvas.toControl(display.getCursorLocation()).y/25)*25)); 
				if (bluePoints.size() > 1) {					
					Point lastPoint = bluePoints.get(bluePoints.size()-1);			
					int count = mouseLocation.x-lastPoint.x;
					
					if (count > 1) {
						float avgHeight = (float)(mouseLocation.y - lastPoint.y)/(count);
						for (int i = 0; i < count; i++) {
							bluePoints.add(new Point(lastPoint.x + i, lastPoint.y + (int)(avgHeight * i)));
						}
					}
					else {
						bluePoints.add(mouseLocation);
					}
				}
				
				else {
					bluePoints.add(mouseLocation);
				}
				
				//redPoints.add(new Point((int) canvas.toControl(display.getCursorLocation()).x, (int) Math.round((canvas.toControl(display.getCursorLocation()).y/25)*25))); 
			}
			else {
				if (bluePoints.size() > 1) {
					Point lastPoint = bluePoints.get(bluePoints.size()-1);
					int count = canvas.toControl(display.getCursorLocation()).x-lastPoint.x;
					
					if (count > 1) {
						float avgHeight = (float)(canvas.toControl(display.getCursorLocation()).y - lastPoint.y)/(count);
						for (int i = 0; i < count; i++) {
							//System.out.println(avgHeight);
							bluePoints.add(new Point(lastPoint.x + i, lastPoint.y + (int)(avgHeight * i)));
							//System.out.println(redPoints.get(redPoints.size()-1));
						}
					}
					else {
						bluePoints.add(canvas.toControl(display.getCursorLocation()));
					}
				}
				
				else {
					bluePoints.add(canvas.toControl(display.getCursorLocation()));
				}
				redTrack = false;
				//System.out.println("setting");
				blueTrack = true;
			}
			if (bluePoints.size() > 1) {
				if(bluePoints.get(bluePoints.size()-1).x < bluePoints.get(bluePoints.size()-2).x) {
					bluePoints.get(bluePoints.size()-1).x = bluePoints.get(bluePoints.size()-2).x;
				}
				if (bluePoints.get(bluePoints.size()-1).x < canvas.getBounds().width /2) {
					bluePoints.get(bluePoints.size()-1).x = canvas.getBounds().width /2;
				}
			}
			if (bluePoints.get(0).x < canvas.getBounds().width /2) {
				bluePoints.get(0).x = canvas.getBounds().width /2;
			}
		}
		//fill2.dispose();
		
		//renderLine(redPoints.toArray(new Point[redPoints.size()]), bluePoints.toArray(new  Point[bluePoints.size()]), null);
		
	}
	public void renderLine(Point[] redPoints, Point [] bluePoints, Point [] interference) {	
		if (!isMoving && !isPressed) {
			return;
		}
		canvas.update();
		canvas.redraw();
		
	}
	public void moveLines(Point[] redPoints, Point [] bluePoints, int increment)
        {
             // Insert some method call here.
 
		//System.out.println(redBackup.get(1));
		int longestLine;
		int otherLine;
		boolean redLong;
		interference.clear();
		
		if (redPoints.length > bluePoints.length) {
			longestLine = redPoints.length;
			otherLine = bluePoints.length;
			redLong = true;
		}
		else {
			longestLine = bluePoints.length;
			otherLine = redPoints.length;
			redLong = false;
		}
		
		for (int i = 0; i < redPoints.length; i++) {
			redPoints[i].x += increment;
		}
		for (int i = 0; i < bluePoints.length; i++) {
			bluePoints[i].x -= increment;

		}
		scale2.setSelection(scale2.getSelection() + 1);
		sliderValue = scale2.getSelection();
		
		for (int i = 0; i < longestLine; i++) {
			for (int k = 0; k < otherLine; k++) {
				if (redLong) {
					//System.out.println("stuff");
					if (i < redPoints.length-1 && k < bluePoints.length - 1) {
						if (redPoints[i].x == bluePoints[k].x){
							int y = (int)(redPoints[i].y-(canvas.getBounds().height)/2)*-1 + (bluePoints[k].y-(canvas.getBounds().height)/2)*-1;
							y *= -1;
							y += ((canvas.getBounds().height)/2);
							interference.add(new Point (redPoints[i].x, y));
							
						}
					}
				}
				if (!redLong) {
					
					if (i < bluePoints.length-1 && k < redPoints.length - 1) {
						if (redPoints[k].x == bluePoints[i].x){
							int y = (int)(bluePoints[i].y-(canvas.getBounds().height)/2)*-1 + (redPoints[k].y-(canvas.getBounds().height)/2)*-1;
							y *= -1;
							y += ((canvas.getBounds().height)/2);
							interference.add(new Point (bluePoints[i].x, y));
						}
					}
				}
			}
		}
		//renderLine(redPoints,bluePoints, interference.toArray(new Point[interference.size()]));
		try {
		    Thread.sleep(scale.getSelection() / 4);                 //1000 milliseconds is one second.
		} catch(InterruptedException ex) {
		    Thread.currentThread().interrupt();
		}
    }
	public void sliderChecker () {
		//if (isPaused) {
		if (scale2.getSelection() < 0 ) {
			scale2.setSelection(0);
		}
		if (scale2.getSelection() > 1000 ) {
			scale2.setSelection(1000);
		}
		if (scale2.getSelection() != sliderValue) {
			isPaused = true;
			moveLines(redPoints.toArray(new Point[redPoints.size()]), bluePoints.toArray(new  Point[bluePoints.size()]), scale2.getSelection() - sliderValue);
			sliderValue = scale2.getSelection();
		}
		//}
	}
	public void drawEquation() {
		
		if (isMoving) {		
			moveLines(redPoints.toArray(new Point[redPoints.size()]), bluePoints.toArray(new  Point[bluePoints.size()]), 1);
			//System.out.println("test");
			return;
		}
		if (isPaused) {
			return;
		}
		
		bluePoints.clear();
		redPoints.clear();
		interference.clear();
		
		int redAmplitude;
		int redPeriod;
		int redHorShift;
		int redVertShift;
		
		int blueAmplitude;
		int bluePeriod;
		int blueHorShift;
		int blueVertShift;
		
		try {
			redAmplitude = Integer.parseInt(redAmp.getText());
		} catch (NumberFormatException e) {
			redAmplitude = 1;
		}
		try {
			redPeriod = (int)(20*(2*Math.PI)/(Double.parseDouble(redPer.getText()) *(Math.PI * 1)));
		} catch (NumberFormatException e) {
			redPeriod = 20;
		}
		
		try {
			redHorShift = Integer.parseInt(redHor.getText()) * -1;
		} catch (NumberFormatException e) {
			redHorShift = 0;
		}
		
		try {
			redVertShift = Integer.parseInt(redVert.getText()) * -1;
		
		} catch (NumberFormatException e) {
			redVertShift = 0;
		}
		
		//BLUE WAVES
		try {
			blueAmplitude = Integer.parseInt(blueAmp.getText());
		} catch (NumberFormatException e) {
			blueAmplitude = 1;
		}
		try {
			bluePeriod = (int)(20*(2*Math.PI)/(Double.parseDouble(bluePer.getText()) *(Math.PI * 1)));
		} catch (NumberFormatException e) {
			bluePeriod = 20;
		}
		
		try {
			blueHorShift = Integer.parseInt(blueHor.getText()) * -1;
		} catch (NumberFormatException e) {
			blueHorShift = 0;
		}
		
		try {
			blueVertShift = Integer.parseInt(blueVert.getText()) * -1;
		
		} catch (NumberFormatException e) {
			blueVertShift = 0;
		}
		
		for (int i = -1000; i < canvas.getBounds().width/2; i++) {
			redPoints.add(new Point(i, (int)(10*redAmplitude*Math.sin(Math.toRadians((redPeriod*(i+redHorShift * 3)))) + canvas.getBounds().height/2 + redVertShift * 3)));
		}
		
		for (int i = canvas.getBounds().width/2; i < 2000; i++) {
			bluePoints.add(new Point(i, (int)(10*blueAmplitude*Math.sin(Math.toRadians((bluePeriod*(i+blueHorShift * 3)))) + canvas.getBounds().height/2 + blueVertShift * 3)));
		}
		
		
	}
}
